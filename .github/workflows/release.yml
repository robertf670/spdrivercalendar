name: Build and Release APK

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v2.8.0

permissions:
  contents: write  # Required for creating releases
  
jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
    
    - name: Decode Google Services JSON
      env:
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON_CONTENT }}
      run: |
        if [ -z "$GOOGLE_SERVICES_JSON" ]; then
          echo "Warning: GOOGLE_SERVICES_JSON secret not set. Using fallback configuration."
          echo "Google Calendar features may not work properly."
          # Create a minimal fallback google-services.json
          cat > android/app/google-services.json << 'EOF'
        {
          "project_info": {
            "project_number": "1051329330296",
            "project_id": "spdrivercalendar-fallback"
          },
          "client": [
            {
              "client_info": {
                "mobilesdk_app_id": "1:1051329330296:android:fallback",
                "android_client_info": {
                  "package_name": "ie.qqrxi.spdrivercalendar"
                }
              },
              "oauth_client": [
                {
                  "client_id": "1051329330296-fallback.apps.googleusercontent.com",
                  "client_type": 1,
                  "android_info": {
                    "package_name": "ie.qqrxi.spdrivercalendar",
                    "certificate_hash": "fallback"
                  }
                }
              ],
              "api_key": [
                {
                  "current_key": "fallback-api-key"
                }
              ],
              "services": {
                "appinvite_service": {
                  "other_platform_oauth_client": []
                }
              }
            }
          ],
          "configuration_version": "1"
        }
        EOF
        else
          echo "Using Google Services JSON from secrets..."
          echo "$GOOGLE_SERVICES_JSON" > android/app/google-services.json
        fi
        
        # Verify the file was created
        if [ -f android/app/google-services.json ]; then
          echo "google-services.json created successfully"
          # Show project info (without sensitive data)
          echo "Project ID: $(cat android/app/google-services.json | grep -o '"project_id"[^,]*' | head -1)"
          echo "Package name: $(cat android/app/google-services.json | grep -o '"package_name"[^,]*' | head -1)"
        else
          echo "Error: Failed to create google-services.json"
          exit 1
        fi
    
    - name: Get dependencies
      run: flutter pub get

    - name: Setup Release Keystore
      env:
        RELEASE_KEYSTORE_BASE64: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        # Check if all required secrets exist
        if [ -z "$RELEASE_KEYSTORE_BASE64" ] || [ -z "$KEYSTORE_PASSWORD" ] || [ -z "$KEY_ALIAS" ] || [ -z "$KEY_PASSWORD" ]; then
          echo "ERROR: Missing release keystore secrets!"
          echo "Required secrets: RELEASE_KEYSTORE_BASE64, KEYSTORE_PASSWORD, KEY_ALIAS, KEY_PASSWORD"
          exit 1
        fi
        
        # Decode and setup release keystore in android/app directory
        echo "$RELEASE_KEYSTORE_BASE64" | base64 -d > android/app/release-keystore.jks
        if [ $? -ne 0 ]; then
          echo "ERROR: Failed to decode release keystore!"
          exit 1
        fi
        
        # Create key.properties file for Android build
        cat > android/key.properties << EOF
        storePassword=$KEYSTORE_PASSWORD
        keyPassword=$KEY_PASSWORD
        keyAlias=$KEY_ALIAS
        storeFile=release-keystore.jks
        EOF
        
        echo "SUCCESS: Release keystore configured!"

    - name: Display Release Keystore SHA-1 fingerprint
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      run: |
        echo "=== Release Keystore SHA-1 Fingerprint ==="
        keytool -list -v -keystore android/app/release-keystore.jks -alias $KEY_ALIAS -storepass $KEYSTORE_PASSWORD | grep SHA1
        echo "========================================"
        echo ""
        echo "This SHA-1 fingerprint should be registered in your Google Cloud Console"
        echo "OAuth 2.0 client configuration for Google Sign-In to work properly."

    - name: Verify Google Sign-In Configuration
      run: |
        echo "=== Google Sign-In Configuration Check ==="
        
        # Check if google_sign_in package is in dependencies
        if grep -q "google_sign_in:" pubspec.yaml; then
          echo "âœ“ google_sign_in package found in pubspec.yaml"
        else
          echo "âœ— google_sign_in package not found in pubspec.yaml"
        fi
        
        # Check if Google Services plugin is configured
        if grep -q "com.google.gms.google-services" android/app/build.gradle.kts; then
          echo "âœ“ Google Services plugin configured in build.gradle.kts"
        else
          echo "? Google Services plugin configuration check (build.gradle.kts not found or misconfigured)"
        fi
        
        # Check if google-services.json exists
        if [ -f android/app/google-services.json ]; then
          echo "âœ“ google-services.json exists"
        else
          echo "âœ— google-services.json missing"
        fi
        
        # Check if release signing is configured
        if [ -f android/key.properties ]; then
          echo "âœ“ Release keystore configuration found"
        else
          echo "âœ— Release keystore configuration missing"
        fi
        
        echo "============================================="

    - name: Build APK
      env:
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        GRADLE_OPTS: "-Xmx6144m -XX:MaxMetaspaceSize=1024m -XX:+HeapDumpOnOutOfMemoryError"
      run: flutter build apk --release --dart-define=ADMIN_PASSWORD=${ADMIN_PASSWORD}
    
    - name: Rename APK with version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/spdrivercalendar-$VERSION.apk
    
    - name: Create Release and Upload APK
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## Release ${{ github.ref_name }}
          
          ðŸ“± **Download & Install**
          1. Download the APK below
          2. Enable "Install from Unknown Sources" in Android settings if needed
          3. Install the APK
          
          ðŸ“‹ **What's New**
          Check the "What's New" screen in the app for detailed release notes and changelog.
          
          ðŸ”§ **Technical Note**
          This release was automatically built and deployed via GitHub Actions with consistent signing certificates.
        files: build/app/outputs/flutter-apk/spdrivercalendar-${{ github.ref_name }}.apk
        draft: false
        prerelease: false

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release.apk
        path: build/app/outputs/flutter-apk/app-release.apk 